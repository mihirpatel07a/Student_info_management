//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMI_Client.BranchServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Branch", Namespace="http://schemas.datacontract.org/2004/07/SMI_Service")]
    [System.SerializableAttribute()]
    public partial class Branch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HODField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfFacultyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BranchName {
            get {
                return this.BranchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchNameField, value) != true)) {
                    this.BranchNameField = value;
                    this.RaisePropertyChanged("BranchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HOD {
            get {
                return this.HODField;
            }
            set {
                if ((object.ReferenceEquals(this.HODField, value) != true)) {
                    this.HODField = value;
                    this.RaisePropertyChanged("HOD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfFaculty {
            get {
                return this.NumberOfFacultyField;
            }
            set {
                if ((this.NumberOfFacultyField.Equals(value) != true)) {
                    this.NumberOfFacultyField = value;
                    this.RaisePropertyChanged("NumberOfFaculty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BranchData", Namespace="http://schemas.datacontract.org/2004/07/SMI_Service")]
    [System.SerializableAttribute()]
    public partial class BranchData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable BranchTableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable BranchTable {
            get {
                return this.BranchTableField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchTableField, value) != true)) {
                    this.BranchTableField = value;
                    this.RaisePropertyChanged("BranchTable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BranchServiceReference.IBranch")]
    public interface IBranch {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/InsertBranch", ReplyAction="http://tempuri.org/IBranch/InsertBranchResponse")]
        bool InsertBranch(SMI_Client.BranchServiceReference.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/InsertBranch", ReplyAction="http://tempuri.org/IBranch/InsertBranchResponse")]
        System.Threading.Tasks.Task<bool> InsertBranchAsync(SMI_Client.BranchServiceReference.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/DeleteBranch", ReplyAction="http://tempuri.org/IBranch/DeleteBranchResponse")]
        bool DeleteBranch(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/DeleteBranch", ReplyAction="http://tempuri.org/IBranch/DeleteBranchResponse")]
        System.Threading.Tasks.Task<bool> DeleteBranchAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/UpdateBranch", ReplyAction="http://tempuri.org/IBranch/UpdateBranchResponse")]
        bool UpdateBranch(int id, SMI_Client.BranchServiceReference.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/UpdateBranch", ReplyAction="http://tempuri.org/IBranch/UpdateBranchResponse")]
        System.Threading.Tasks.Task<bool> UpdateBranchAsync(int id, SMI_Client.BranchServiceReference.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/GetBranchCount", ReplyAction="http://tempuri.org/IBranch/GetBranchCountResponse")]
        int GetBranchCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/GetBranchCount", ReplyAction="http://tempuri.org/IBranch/GetBranchCountResponse")]
        System.Threading.Tasks.Task<int> GetBranchCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/GetBranch", ReplyAction="http://tempuri.org/IBranch/GetBranchResponse")]
        SMI_Client.BranchServiceReference.Branch GetBranch(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/GetBranch", ReplyAction="http://tempuri.org/IBranch/GetBranchResponse")]
        System.Threading.Tasks.Task<SMI_Client.BranchServiceReference.Branch> GetBranchAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/GetBranchData", ReplyAction="http://tempuri.org/IBranch/GetBranchDataResponse")]
        SMI_Client.BranchServiceReference.BranchData GetBranchData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranch/GetBranchData", ReplyAction="http://tempuri.org/IBranch/GetBranchDataResponse")]
        System.Threading.Tasks.Task<SMI_Client.BranchServiceReference.BranchData> GetBranchDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBranchChannel : SMI_Client.BranchServiceReference.IBranch, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchClient : System.ServiceModel.ClientBase<SMI_Client.BranchServiceReference.IBranch>, SMI_Client.BranchServiceReference.IBranch {
        
        public BranchClient() {
        }
        
        public BranchClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BranchClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BranchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BranchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertBranch(SMI_Client.BranchServiceReference.Branch branch) {
            return base.Channel.InsertBranch(branch);
        }
        
        public System.Threading.Tasks.Task<bool> InsertBranchAsync(SMI_Client.BranchServiceReference.Branch branch) {
            return base.Channel.InsertBranchAsync(branch);
        }
        
        public bool DeleteBranch(int id) {
            return base.Channel.DeleteBranch(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBranchAsync(int id) {
            return base.Channel.DeleteBranchAsync(id);
        }
        
        public bool UpdateBranch(int id, SMI_Client.BranchServiceReference.Branch branch) {
            return base.Channel.UpdateBranch(id, branch);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBranchAsync(int id, SMI_Client.BranchServiceReference.Branch branch) {
            return base.Channel.UpdateBranchAsync(id, branch);
        }
        
        public int GetBranchCount() {
            return base.Channel.GetBranchCount();
        }
        
        public System.Threading.Tasks.Task<int> GetBranchCountAsync() {
            return base.Channel.GetBranchCountAsync();
        }
        
        public SMI_Client.BranchServiceReference.Branch GetBranch(int id) {
            return base.Channel.GetBranch(id);
        }
        
        public System.Threading.Tasks.Task<SMI_Client.BranchServiceReference.Branch> GetBranchAsync(int id) {
            return base.Channel.GetBranchAsync(id);
        }
        
        public SMI_Client.BranchServiceReference.BranchData GetBranchData() {
            return base.Channel.GetBranchData();
        }
        
        public System.Threading.Tasks.Task<SMI_Client.BranchServiceReference.BranchData> GetBranchDataAsync() {
            return base.Channel.GetBranchDataAsync();
        }
    }
}
